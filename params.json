{"name":"WebAPI Token Auth Bootstrap","tagline":"Out of the box Token based User Auth for WebAPI applications, Provides ready to use 'TokenAuthorize' Attribute and 'TokenAuthApiController' Controller.","body":"## Features\r\n**Token Based User Authentication**\r\nUser Property inside the TokenAuthApiController (Id, Username, Role, LastAccess).\r\n\r\n**Token Based User Authorization**\r\nTokenAuthorizeAttribute with Access Level - Public, User, Admin or Anonymous.\r\n\r\n**Built-in Functionality**\r\nLogin(), Logoff(), Error(), Unauthorized() Responses with various overloads.\r\n\r\n**Shared Dynamic Object Betwen Client and Server**\r\nUserData Property inside the TokenAuthApiController (Up to size of 4 KB storage).\r\nGreat for caching data in the client side, especially for thin back-end applications like Single Page Applications.\r\n\r\n## Getting Started\r\nInstall Package from Nuget console:\r\n``` Install-Package WebApiTokenAuth ```\r\n\r\nNow, your controllers should inherit from `TokenAuthApiController` instead of the default ApiController,\r\nso you can access its extensions:\r\n* Access to the properties `UserMetadata User` and `dynamic UserData`.\r\n* Access following functions: `Login()`, `Logout()`, `Error()` and `Unauthorize()`.\r\n\r\n**Note**\r\n\r\n_In order to use the `UserData` dynamic object that enables client side caching using cookies,_\r\n_add the following line to the `Application_Start()` function inside the `Global.asax` file:_\r\n_`GlobalConfiguration.Configuration.Filters.Add(new UserDataModificationActionFilter());`_\r\n\r\n### Code Sample\r\nHere I demonstrate the simplicity of using the **WebApiTokenAuth** package with Register,\r\nLogin and Logout functionality.\r\n\r\n    /// <summary>\r\n    /// Handles all the account related actions - user registration, login and logout.\r\n    /// </summary>\r\n    public class AuthController : TokenAuthApiController\r\n    {\r\n        // GET api/auth/login\r\n        [ActionName(\"login\")]\r\n        [TokenAuthentication(AccessLevel.Anonymous)]\r\n        public HttpResponseMessage PostLogin([FromBody]LoginViewModel user)\r\n        {\r\n            // Input validaiton.\r\n            if (user == null || user.Username == null || user.Password == null)\r\n            {\r\n                return Error(\"Please enter username and password.\");\r\n            }\r\n\r\n            // Retrieve the user data from the Data access layer.\r\n            IDal dal = new ProGamersDal();\r\n            var currentUser = dal.GetUser(user.Username, user.Password);\r\n\r\n            // If not match found - return error.\r\n            if (currentUser == null)\r\n            {\r\n                return Error(\"Bad username or password.\");\r\n            }\r\n\r\n            // Cache username and user role at the client side as cookie - accessible by javascript at the client side as json object.\r\n            // Note this data is not secured since the user can access the cookie. Don't store any sensitive information there.\r\n            // In case you save login data in the client side as I did, Server-side validation is a MUST.\r\n            UserData.username = \"Dgandalf\";\r\n            UserData.role = (int) UserRole.User;\r\n\r\n            // Creates an access token for this user, stores it in the configured TokenStorage (By default use in-memory storage).\r\n            // You can set different TokenStorage at TokenAuthenticationConfiguration.TokenStorage in your Application_Start \r\n            // function inside theg lobal.asax file. Additionally, sends cookie with the generated access token to the user.\r\n            return Login(1, \"Dgandalf\", UserRole.User);\r\n\r\n        }\r\n\r\n        // POST api/auth/logout\r\n        [ActionName(\"logout\")]\r\n        [TokenAuthentication(AccessLevel.User)]\r\n        public HttpResponseMessage PostLogout()\r\n        {\r\n            // Deletes the token and user-data cookies with the generated access token to the user.\r\n            return Logout();\r\n        }\r\n\r\n        // POST api/auth/register\r\n        [ActionName(\"register\")]\r\n        [TokenAuthentication(AccessLevel.Anonymous)]\r\n        public HttpResponseMessage PostRegister(User user)\r\n        {\r\n            // Handle registration data here.\r\n\r\n            // Returns OK response. You can also use Login() function instead, so the user will be logged in \r\n            // automaticly after a successful registration.\r\n            return Ok();\r\n        }\r\n    }\r\n\r\n### Support or Contact\r\nHaving trouble or any questions related to WebAPI Token Auth Bootstrap? Feel free to contact me at:\r\nadmin@AviranCohen.com","google":"UA-44625984-1","note":"Don't delete this file! It's used internally to help with page regeneration."}